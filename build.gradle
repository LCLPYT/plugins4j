import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'work.lclpnet.loader4j'
version '1.0.0'
archivesBaseName = 'provider'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'org.json:json:20220924'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

sourceSets {
    consumer {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    consumerImplementation.extendsFrom(testImplementation)
    consumerRuntimeOnly.extendsFrom(testRuntimeOnly)
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes('Main-Class': 'work.lclpnet.provider.Main')
    }
}

task consumerJar(type: Jar) {
    from sourceSets.consumer.output
    archiveVersion.set(project.version.toString())
    archiveBaseName.set('consumer')
}

artifacts {
    archives consumerJar
}

shadowJar {
    archiveClassifier.set('full')

    dependencies {
        include(dependency('org.apache.logging.log4j:log4j-core:.*'))
        include(dependency('org.apache.logging.log4j:log4j-api:.*'))
        include(dependency('org.json:json:.*'))
    }
}

tasks.build.dependsOn tasks.shadowJar

abstract class DeployTask extends DefaultTask {
    @TaskAction
    def deploy() {
        final def proj = this.getProject()
        final def libsDir = proj.getBuildDir().toPath().resolve('libs')
        final def version = proj.getVersion()

        def provider = 'provider-%s-full.jar'.formatted(version)

        final def runDir = proj.getProjectDir().toPath().resolve('run')
        if (!Files.exists(runDir)) Files.createDirectories(runDir)

        Files.copy(libsDir.resolve(provider), runDir.resolve(provider), StandardCopyOption.REPLACE_EXISTING)

        println('Files have been deployed to %s'.formatted(runDir))
    }
}

tasks.register("deploy", DeployTask)

abstract class DeployPluginsTask extends DefaultTask {
    @TaskAction
    def execute() {
        final def proj = this.getProject()
        final def libsDir = proj.getBuildDir().toPath().resolve('libs')
        final def version = proj.getVersion()

        final def pluginsDir = proj.getProjectDir().toPath().resolve('run/plugins')
        copyPlugins(libsDir, pluginsDir, version)

        println('Plugins have been deployed to %s'.formatted(pluginsDir))
    }

    static def copyPlugins(java.nio.file.Path libsDir, java.nio.file.Path pluginsDir, version) {
        if (!Files.exists(pluginsDir)) Files.createDirectories(pluginsDir)

        def plugins = ['consumer']

        plugins.forEach(plugin -> {
            def consumer = '%s-%s.jar'.formatted(plugin, version)
            Files.copy(libsDir.resolve(consumer), pluginsDir.resolve(consumer), StandardCopyOption.REPLACE_EXISTING)
        })
    }
}

tasks.register('deployPlugins', DeployPluginsTask)

deploy.configure {
    dependsOn build
    dependsOn deployPlugins
}

deployPlugins.configure {
    dependsOn build
}
